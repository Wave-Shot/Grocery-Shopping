#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct store{
	int sno;
	char pro_name[20];
	int qty;
	int price;
	char exp_date[20];	
};
struct cart{
	int sno;
	char pro_name[20];
	int price;
	int qty;
	struct cart *next;
};
struct store *d[20];
struct store *s[20];
struct store *g[20];
typedef struct cart *nodes;
nodes new,prev,temp,tem,tempo;
typedef nodes header;
header h;
void create_add_to_cart(){
  h=(struct cart *)malloc(sizeof(struct cart));
  h->next=NULL;
}


void grains(){
	int i=0;
	for(i=0;i<4;i++){
		g[i] = (struct store *)malloc(sizeof(struct store));
		if(i==0){
			g[i]->sno=i;
			g[i]->qty=100;  //ASSUMING 1 PACKET 1 KG
			strcpy(g[i]->pro_name,"RICE");
			g[i]->price=135; //ASSUMING PRICE PER PACKET
			strcpy(g[i]->exp_date,"02.12.2020");
		}		
		else if(i==1){
			g[i]->sno=i;
			g[i]->qty=150;  //ASSUMING 1 PACKET 1 KG
			strcpy(g[i]->pro_name,"WHEAT");
			g[i]->price=50; //ASSUMING PRICE PER PACKET
			strcpy(g[i]->exp_date,"09.01.2021");
		}
		else if(i==2){
			g[i]->sno=i;
			g[i]->qty=50;  //ASSUMING 1 PACKET 1 KG
			strcpy(g[i]->pro_name,"MAIZE");
			g[i]->price=42; //ASSUMING PRICE PER PACKET
			strcpy(g[i]->exp_date,"09.11.2021");
		}
		else{
			g[i]->sno=i;
			g[i]->qty=260;  //ASSUMING 1 PACKET 1 KG
			strcpy(g[i]->pro_name,"BARLEY");
			g[i]->price=420; //ASSUMING PRICE PER PACKET
			strcpy(g[i]->exp_date,"23.09.2021");
		}
	}
}
void snacks(){
	int i=0;
	for(i=0;i<4;i++){
		s[i] = (struct store *)malloc(sizeof(struct store));
		if(i==0){
			s[i]->sno=i;
			s[i]->qty=50;  //ASSUMING 1 PACKET 1 KG
			strcpy(s[i]->pro_name,"CHIPS");
			s[i]->price=10; //ASSUMING PRICE PER PACKET
			strcpy(s[i]->exp_date,"23.02.2021");
		}		
		else if(i==1)
		{
			s[i]->sno=i;
			s[i]->qty=75;  //ASSUMING 1 PACKET 1 KG
			strcpy(s[i]->pro_name,"CHOCOLATE");
			s[i]->price=5; //ASSUMING PRICE PER PACKET
			strcpy(s[i]->exp_date,"12.12.2020");
		}
		
		else if(i==2){
			s[i]->sno=i;
			s[i]->qty=60;  //ASSUMING 1 PACKET 1 KG
			strcpy(s[i]->pro_name,"BISCUITS");
			s[i]->price=10; //ASSUMING PRICE PER PACKET
			strcpy(s[i]->exp_date,"10.02.2021");
		}
		else {
			s[i]->sno=i;
			s[i]->qty=175;  //ASSUMING 1 PACKET 1 KG
			strcpy(s[i]->pro_name,"NUTS");
			s[i]->price=30; //ASSUMING PRICE PER PACKET
			strcpy(s[i]->exp_date,"15.05.2021");
		}
	
   }
}
void dairy(){
	int i=0;
	for(i=0;i<4;i++){
		d[i] = (struct store *)malloc(sizeof(struct store));
		if(i==0){
			d[i]->sno=i;
			d[i]->qty=200;  //ASSUMING 1 PACKET 1 KG
			strcpy(d[i]->pro_name,"MILK");
			d[i]->price=50; //ASSUMING PRICE PER PACKET
			strcpy(d[i]->exp_date,"27.10.2020");
		}		
		else if(i==1)
		{
			d[i]->sno=i;
			d[i]->qty=200;  //ASSUMING 1 PACKET 1 KG
			strcpy(d[i]->pro_name,"CURD");
			d[i]->price=60; //ASSUMING PRICE PER PACKET
			strcpy(d[i]->exp_date,"27.10.2020");
		}
		
		else if(i==2){
			d[i]->sno=i;
			d[i]->qty=100;  //ASSUMING 1 PACKET 1 KG
			strcpy(d[i]->pro_name,"PANEER");
			d[i]->price=500; //ASSUMING PRICE PER PACKET
			strcpy(d[i]->exp_date,"24.11.2020");
		}
		else{
			d[i]->sno=i;
			d[i]->qty=100;  //ASSUMING 1 PACKET 1 KG
			strcpy(d[i]->pro_name,"CHEESE");
			d[i]->price=350; //ASSUMING PRICE PER PACKET
			strcpy(d[i]->exp_date,"24.11.2020");
		}
	}	

}
void display_cart(){
	int i=1;
    if(h->next==NULL){
        printf("\nEmpty Cart:(");
        
    }
    
    else{
    	temp=h->next;
		printf("\n|||SNO \t PRODUCT NAME \t QUANTITY\tPRICE/ITEM|||");
		printf("\n--------------------------------------------------");
		while(temp!=NULL){
			temp->sno=i;
			printf("\n|||%d",i);
			printf(" %10s",temp->pro_name);
			printf("%15d",temp->qty);
			printf(" %15d  |||",temp->price);
			temp=temp->next;
			i++;
		}
}
}
int sum_price(){
	tem=h->next;
	int total,x;
	
	while(tem!=NULL){
		x=(tem->price)*(tem->qty);
		total+=x;
		tem=tem->next;
	}
		return total;
	
}
void display_bill(){
	int tot=sum_price();
    if(h->next==NULL){
        printf("\nPlease add in cart:(");
        
    }
    
    else{
    	temp=h->next;
		printf("\n|||SNO \t PRODUCT NAME \t QUANTITY\tPRICE/ITEM|||");
		printf("\n--------------------------------------------------");
		while(temp!=NULL){
			printf("\n|||%d",temp->sno);
			printf(" %10s",temp->pro_name);
			printf("%15d",temp->qty);
			printf(" %15d  |||",temp->price);
			temp=temp->next;
		}
			printf("\n\n                 TOTAL AMOUNT :        %d",tot);
}
}
int isempty(){
	return h->next==NULL;
}
int quantity(struct store **m,int sno,int qty){
    if(m[sno]->qty-qty<0){
        return 1;
    }
    else
    {
        return 0;
    }
}
int snum=1;
void add(struct store **m,int sno,int q){
    int f=0;
   	new=(struct cart *)malloc(sizeof(struct cart));
	temp=h->next;
	if(q<=0){
        printf("Please enter valid quantity\n");
    }
    else if (quantity(m,sno,q)==1) {
        printf("*****Stock is not available****");
    }
   
   else{
   if(isempty()){
   	
		strcpy(new->pro_name,m[sno]->pro_name);
		new->price=m[sno]->price;
		new->qty=q;
		new->next=NULL;
		
		h->next=new;
	
}
	else{
		while(temp!=NULL){
			if(strcmp(temp->pro_name,m[sno]->pro_name)==0){
				f=5;
				
				break;
			}
			
			temp=temp->next;
		}
		
		if(f==0){
			
			new->price=m[sno]->price;
			new->qty=q;
			strcpy(new->pro_name,m[sno]->pro_name);
			new->next=h->next;
			h->next=new;
			
			
		}
		else{
			temp->qty=temp->qty+q;
		}
		
	}

}

 m[sno]->qty=m[sno]->qty-q;
		
}

void display_table(struct store** m){
	int j=0,f=0;
	printf(" %10s %10s %10s %10s %10s \n","SNO","PRODUCT-NAME","QUANTITY","PRICE","EXP-DATE");
    printf("---------------------------------------------------------------------------------------------------\n");
   
    for(j=0;j<4;j++){
        printf(" %10d %10s %10d %13d %10s\n",m[j]->sno,m[j]->pro_name,m[j]->qty,m[j]->price,m[j]->exp_date);
    }
    		
    printf("\n\n");
}
void edit_cart(int new_qty,char* product)
{
	int i,k=0;
	
	
    if(new_qty==0)
    {
		printf("\nINVALID QUANTITY");
    }
    else
    {
        temp=h->next;
        while(temp!=NULL  &&  strcmp(temp->pro_name,product)!=0)
        {
            temp=temp->next;
        }
        if(temp==NULL)
        {
           printf("\nSORRY,IF YOU WANT TO INSERT PRESS 2");
        }
        else
        {
            for(i=0;i<4;i++)
            {
                if(strcmp(d[i]->pro_name,product)==0)
                {
                    d[i]->qty=d[i]->qty+temp->qty-new_qty;
                    display_table(d);
                }
            }
            for(i=0;i<4;i++)
            {
                if(strcmp(g[i]->pro_name,product)==0)
                {
                    g[i]->qty=g[i]->qty+temp->qty-new_qty;
                    display_table(g);
                }
            }
            for( i=0;i<4;i++)
            {
                if(strcmp(s[i]->pro_name,product)==0)
                {
                    s[i]->qty=s[i]->qty+temp->qty-new_qty;
                    display_table(s);
                }
            }
            
            temp->qty=new_qty;
        }
    }
}
void insert_cart(int quan,char* product)
{
    int i,p,x=0,y=0,z=0;
    if(quan==0)
    {
           printf("\n NO VALUES INSERTED");
    }
    else
    {
    	temp=h->next;
    	while(temp!=NULL && strcmp(temp->pro_name,product)!=0){
    		temp=temp->next;
		}
		if(temp==NULL){
	
	
      
        for(i=0;i<4;i++){
           if(strcmp(d[i]->pro_name,product)==0)
            {
                    p=d[i]->price;
                    d[i]->qty=d[i]->qty-quan;
                    display_table(d);
                    new=(struct cart *)malloc(sizeof(struct cart));
			         strcpy(new->pro_name,product);
			         new->price=p;
			         new->qty=quan;
			         new->next=h->next;
			         h->next=new;
                    
             }
             else{
             	x=1;
			 }
         }
        for(i=0;i<4;i++){
           if(strcmp(g[i]->pro_name,product)==0)
            {
                    p=g[i]->price;
                    g[i]->qty=g[i]->qty-quan;
                    display_table(g);
                    new=(struct cart *)malloc(sizeof(struct cart));
         strcpy(new->pro_name,product);
         new->price=p;
         new->qty=quan;
         new->next=h->next;
         h->next=new;
                    
             }
             else{
             	y=1;
			 }
         }
        for(i=0;i<4;i++){
           if(strcmp(s[i]->pro_name,product)==0)
            {
                    p=s[i]->price;
                    s[i]->qty=s[i]->qty-quan;
                    display_table(s);
                    new=(struct cart *)malloc(sizeof(struct cart));
			         strcpy(new->pro_name,product);
			         new->price=p;
			         new->qty=quan;
			         new->next=h->next;
			         h->next=new;
             }
             else{
             	z=1;
			 }
         }
         
    }

else{
	edit_cart(quan,product);
}
    
  }
  if(x==1 && y==1 && z==1){
  	printf("Enter valid item");
  }
}
void search_item(char *product){
	temp=h->next;
	while(temp!=NULL && strcmp(temp->pro_name,product)!=0){
		temp=temp->next;
	}
	if (temp==NULL){
		printf("\nSorry you have'nt added this item ,Do you wat to add this, if yes press 2");
		
	}
	else{
		printf("\n%s is found --- %d",product,temp->qty);
		printf("\nDo you want to edit ?If yes press 3");
	}
}


void remove_cart(char* item)
{
	int i;
    if(h->next==NULL)
    {
        printf("\nYou have not added any item to your cart, Please add items to the cart to remove them. \n");
    }
    else
    {
        temp=h->next;
        prev=h->next;
        while(temp!=NULL && strcmp(temp->pro_name,item)!=0)
        {
            prev=temp;
            temp=temp->next;
        }
        if(temp==NULL)
        {
            printf("No such item added to cart!\n");
        }
        else
        {
            for(i=0;i<3;i++)
            {
                if(strcmp(g[i]->pro_name,item)==0)
                {
                    g[i]->qty=g[i]->qty+temp->qty;
                    display_table(g);
                }
            }
            for( i=0;i<3;i++)
            {
                if(strcmp(s[i]->pro_name,item)==0)
                {
                    s[i]->qty=s[i]->qty+temp->qty;
                    display_table(s);
                }
            }
            for(i=0;i<3;i++)
            {
                if(strcmp(d[i]->pro_name,item)==0)
                {
                    d[i]->qty=d[i]->qty+temp->qty;
                    display_table(d);
                }
            }
            if(temp==h->next)
            {
                h->next=temp->next;
                free(temp);
            }
            else
            {
                prev->next=temp->next;
                free(temp);
            }
        }
    }
}
void remove_full()
{
  if(h->next=NULL)
    printf("\n EMPTY CART");
  else
  {
    temp=h->next;
    while(temp != NULL)
    {
       tem=temp;
       temp=temp->next;
       free(tem);
    }
    h->next=NULL;
   }
}
void store_table(){
	int n,option,qty;
	printf("\nWhat would you like to buy?");
	do{
		printf("\n 1.Dairy products \n 2.Snacks products \n 3.Grain items \n 4.Exit");
		printf("\nchoose your option:");
		scanf("%d",&n);
		switch(n){
			case 1:{
				display_table(d);
					
    			
    			do{
    				printf("\n[1.MILK 2.CURD 3.PANEER 4.CHEESE 5.BACK]");
    				printf("\nwhat would you like to add in your cart:");
    				scanf("%d",&option);
    				switch(option){
    				case 1:{
    					printf("\nenter quantity:");
    					scanf("%d",&qty);
    					printf("\nMILK added to cart\n");
    					add(d,option-1,qty);
    					display_cart();
						break;
					}
					case 2:{
						display_table(d);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nCURD added to cart\n");
						add(d,option-1,qty);
						display_cart();
						break;
					}
					case 3:{
						display_table(d);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nPANEER added to cart\n");
						add(d,option-1,qty);
						
						display_cart();
						break;
					}
					case 4:{
						display_table(d);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nCHEESE added to cart\n");
						add(d,option-1,qty);
						display_cart();	
						break;
					}
					default:{
						printf("Invalid:(");
						break;
					}
				}
				
			}while(option!=5);
				break;
			}
			case 2:{
				display_table(s);
				do{
					printf("\n[1.CHIPS 2.CHOCOLATE 3.BISCUITS 4.NUTS 5.BACK]");
				
    				printf("\nwhat would you like to add in your cart:");
    				scanf("%d",&option);
    				switch(option){
    				case 1:{
    					printf("\nenter quantity:");
    					scanf("%d",&qty);
    					printf("\nCHIPS added to cart\n");
    					add(s,option-1,qty);
    					display_cart();
						break;
					}
					case 2:{
						display_table(s);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nCHOCOLATE added to cart\n");
						add(s,option-1,qty);
						display_cart();
						break;
					}
					case 3:{
						display_table(s);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nBISCUITS added to cart\n");
						add(s,option-1,qty);
						display_cart();
						break;
					}
					case 4:{
						display_table(s);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nNUTS added to cart\n");
						add(s,option-1,qty);
						display_cart();
						break;
					}
					
					default:{
						printf("Invalid:(");
						break;
					}
				}
				
			}while(option!=5);
				break;
			}
			case 3:{
				display_table(g);
					do{
							printf("\n[1.RICE 2.WHEAT 3.MAIZE 4.BARLEY 5.BACK]");
    				printf("\nwhat would you like to add in your cart:");
    				scanf("%d",&option);
    				switch(option){
    				case 1:{
    					printf("\nenter quantity:");
    					scanf("%d",&qty);
    					printf("\nRICE added to cart\n");
    					add(g,option-1,qty);
    					display_cart();
						break;
					}
					case 2:{
						display_table(g);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nWHEAT added to cart\n");
						add(g,option-1,qty);
						display_cart();
						break;
					}
					case 3:{
						display_table(g);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nMAIZE added to cart\n");
						add(g,option-1,qty);
						display_cart();
						break;
					}
					case 4:{
						display_table(g);
						printf("\n");
						printf("\nenter quantity:");
    					scanf("%d",&qty);
						printf("\nBARLEY added to cart\n");
						add(g,option-1,qty);
						display_cart();
						break;
					}
					default:{
						printf("Invalid:(");
						break;
					}
				}
				
			}while(option!=5);
				break;
			}
			default:{
				printf("invalid:(");
				break;
			}
		}
	}while(n!=4);
	
}
int main(){
	char *name_cus,items[20];
	name_cus=(char *)malloc(20*sizeof(char));
	printf("ENTER YOUR NAME:");
	int n,k=0;
	scanf("%s",name_cus);
	printf("\n------------------------------------------------------------------------------------------------------\n");
	printf("                     WELCOME TO SVS GROCERY SHOP");
	printf("\n------------------------------------------------------------------------------------------------------\n");
	printf("\n:)Thanks for choosing our store");
	printf("\n-------------------------------\n");
	create_add_to_cart();
	dairy();
	grains();
	snacks();
	store_table();
	printf("\n\n-----------------------YOUR CART IS READY----------------------------");
	printf("\nDO YOU LIKE TO:");
	int x,QUANTITY;
	char *item;
	int quan;
	item=(char *)malloc(20*sizeof(char));
	do{
		printf("\nenter your choice:");
		scanf("%d",&x);
		switch(x){
			case 1:{
				display_bill();
				printf("\nTHANK YOU FOR CHOOSING OUR SHOP");
				break;
			}
			case 2:{
			       printf("\n Enter product name:");
			       scanf("%s",item);
			       printf("\n Enter quantity:");
			       scanf("%d",&quan);
			       insert_cart(quan,item);
			       display_cart();
			       break;
			
			}
			case 3:{
				printf("\nenter item to edit:");
				scanf("%s",item);
				printf("\nenter your new quantity:");
				scanf("%d",&quan);
				edit_cart(quan,item);
				display_cart();
				break;
			}
			case 4:{
				printf("\nplease neter item to search in your cart:");
				scanf("%s",item);
				search_item(item);
				break;
			}
			case 5:{
				printf("Enter the name : ");
                scanf("%s",item);
                remove_cart(item);
                display_cart();
				break;
			}	
			case 6:{
			        remove_full();
			        printf("\n ITEMS IN THE CART ARE REMOVED");
			        display_cart();
			        break;
			        }		
			default:{
				printf("Invalid :(");
				break;
			}
		}
	}while(x!=7);
	return 0;
	
	
}
